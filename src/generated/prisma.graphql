# source: http://localhost:4466
# timestamp: Sun May 31 2020 20:07:20 GMT+0800 (China Standard Time)

type AggregateSchedule {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createSchedule(data: ScheduleCreateInput!): Schedule!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateSchedule(data: ScheduleUpdateInput!, where: ScheduleWhereUniqueInput!): Schedule
  deleteUser(where: UserWhereUniqueInput!): User
  deleteSchedule(where: ScheduleWhereUniqueInput!): Schedule
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertSchedule(where: ScheduleWhereUniqueInput!, create: ScheduleCreateInput!, update: ScheduleUpdateInput!): Schedule!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManySchedules(data: ScheduleUpdateManyMutationInput!, where: ScheduleWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManySchedules(where: ScheduleWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum PrismaDatabase {
  default
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  schedules(where: ScheduleWhereInput, orderBy: ScheduleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Schedule]!
  user(where: UserWhereUniqueInput!): User
  schedule(where: ScheduleWhereUniqueInput!): Schedule
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  schedulesConnection(where: ScheduleWhereInput, orderBy: ScheduleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ScheduleConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Schedule implements Node {
  id: ID!
  freetime_next: String!
  freetime_default: String!
  useDefault: Boolean!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ScheduleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ScheduleEdge]!
  aggregate: AggregateSchedule!
}

input ScheduleCreateInput {
  id: ID
  freetime_next: String!
  freetime_default: String!
  useDefault: Boolean!
  user: UserCreateOneWithoutSchedulesInput!
}

input ScheduleCreateManyWithoutUserInput {
  create: [ScheduleCreateWithoutUserInput!]
  connect: [ScheduleWhereUniqueInput!]
}

input ScheduleCreateWithoutUserInput {
  id: ID
  freetime_next: String!
  freetime_default: String!
  useDefault: Boolean!
}

"""An edge in a connection."""
type ScheduleEdge {
  """The item at the end of the edge."""
  node: Schedule!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ScheduleOrderByInput {
  id_ASC
  id_DESC
  freetime_next_ASC
  freetime_next_DESC
  freetime_default_ASC
  freetime_default_DESC
  useDefault_ASC
  useDefault_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SchedulePreviousValues {
  id: ID!
  freetime_next: String!
  freetime_default: String!
  useDefault: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ScheduleScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ScheduleScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ScheduleScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ScheduleScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  freetime_next: String

  """All values that are not equal to given value."""
  freetime_next_not: String

  """All values that are contained in given list."""
  freetime_next_in: [String!]

  """All values that are not contained in given list."""
  freetime_next_not_in: [String!]

  """All values less than the given value."""
  freetime_next_lt: String

  """All values less than or equal the given value."""
  freetime_next_lte: String

  """All values greater than the given value."""
  freetime_next_gt: String

  """All values greater than or equal the given value."""
  freetime_next_gte: String

  """All values containing the given string."""
  freetime_next_contains: String

  """All values not containing the given string."""
  freetime_next_not_contains: String

  """All values starting with the given string."""
  freetime_next_starts_with: String

  """All values not starting with the given string."""
  freetime_next_not_starts_with: String

  """All values ending with the given string."""
  freetime_next_ends_with: String

  """All values not ending with the given string."""
  freetime_next_not_ends_with: String
  freetime_default: String

  """All values that are not equal to given value."""
  freetime_default_not: String

  """All values that are contained in given list."""
  freetime_default_in: [String!]

  """All values that are not contained in given list."""
  freetime_default_not_in: [String!]

  """All values less than the given value."""
  freetime_default_lt: String

  """All values less than or equal the given value."""
  freetime_default_lte: String

  """All values greater than the given value."""
  freetime_default_gt: String

  """All values greater than or equal the given value."""
  freetime_default_gte: String

  """All values containing the given string."""
  freetime_default_contains: String

  """All values not containing the given string."""
  freetime_default_not_contains: String

  """All values starting with the given string."""
  freetime_default_starts_with: String

  """All values not starting with the given string."""
  freetime_default_not_starts_with: String

  """All values ending with the given string."""
  freetime_default_ends_with: String

  """All values not ending with the given string."""
  freetime_default_not_ends_with: String
  useDefault: Boolean

  """All values that are not equal to given value."""
  useDefault_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ScheduleSubscriptionPayload {
  mutation: MutationType!
  node: Schedule
  updatedFields: [String!]
  previousValues: SchedulePreviousValues
}

input ScheduleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ScheduleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ScheduleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ScheduleSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ScheduleWhereInput
}

input ScheduleUpdateInput {
  freetime_next: String
  freetime_default: String
  useDefault: Boolean
  user: UserUpdateOneRequiredWithoutSchedulesInput
}

input ScheduleUpdateManyDataInput {
  freetime_next: String
  freetime_default: String
  useDefault: Boolean
}

input ScheduleUpdateManyMutationInput {
  freetime_next: String
  freetime_default: String
  useDefault: Boolean
}

input ScheduleUpdateManyWithoutUserInput {
  create: [ScheduleCreateWithoutUserInput!]
  connect: [ScheduleWhereUniqueInput!]
  set: [ScheduleWhereUniqueInput!]
  disconnect: [ScheduleWhereUniqueInput!]
  delete: [ScheduleWhereUniqueInput!]
  update: [ScheduleUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ScheduleUpdateManyWithWhereNestedInput!]
  deleteMany: [ScheduleScalarWhereInput!]
  upsert: [ScheduleUpsertWithWhereUniqueWithoutUserInput!]
}

input ScheduleUpdateManyWithWhereNestedInput {
  where: ScheduleScalarWhereInput!
  data: ScheduleUpdateManyDataInput!
}

input ScheduleUpdateWithoutUserDataInput {
  freetime_next: String
  freetime_default: String
  useDefault: Boolean
}

input ScheduleUpdateWithWhereUniqueWithoutUserInput {
  where: ScheduleWhereUniqueInput!
  data: ScheduleUpdateWithoutUserDataInput!
}

input ScheduleUpsertWithWhereUniqueWithoutUserInput {
  where: ScheduleWhereUniqueInput!
  update: ScheduleUpdateWithoutUserDataInput!
  create: ScheduleCreateWithoutUserInput!
}

input ScheduleWhereInput {
  """Logical AND on all given filters."""
  AND: [ScheduleWhereInput!]

  """Logical OR on all given filters."""
  OR: [ScheduleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ScheduleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  freetime_next: String

  """All values that are not equal to given value."""
  freetime_next_not: String

  """All values that are contained in given list."""
  freetime_next_in: [String!]

  """All values that are not contained in given list."""
  freetime_next_not_in: [String!]

  """All values less than the given value."""
  freetime_next_lt: String

  """All values less than or equal the given value."""
  freetime_next_lte: String

  """All values greater than the given value."""
  freetime_next_gt: String

  """All values greater than or equal the given value."""
  freetime_next_gte: String

  """All values containing the given string."""
  freetime_next_contains: String

  """All values not containing the given string."""
  freetime_next_not_contains: String

  """All values starting with the given string."""
  freetime_next_starts_with: String

  """All values not starting with the given string."""
  freetime_next_not_starts_with: String

  """All values ending with the given string."""
  freetime_next_ends_with: String

  """All values not ending with the given string."""
  freetime_next_not_ends_with: String
  freetime_default: String

  """All values that are not equal to given value."""
  freetime_default_not: String

  """All values that are contained in given list."""
  freetime_default_in: [String!]

  """All values that are not contained in given list."""
  freetime_default_not_in: [String!]

  """All values less than the given value."""
  freetime_default_lt: String

  """All values less than or equal the given value."""
  freetime_default_lte: String

  """All values greater than the given value."""
  freetime_default_gt: String

  """All values greater than or equal the given value."""
  freetime_default_gte: String

  """All values containing the given string."""
  freetime_default_contains: String

  """All values not containing the given string."""
  freetime_default_not_contains: String

  """All values starting with the given string."""
  freetime_default_starts_with: String

  """All values not starting with the given string."""
  freetime_default_not_starts_with: String

  """All values ending with the given string."""
  freetime_default_ends_with: String

  """All values not ending with the given string."""
  freetime_default_not_ends_with: String
  useDefault: Boolean

  """All values that are not equal to given value."""
  useDefault_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
}

input ScheduleWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  schedule(where: ScheduleSubscriptionWhereInput): ScheduleSubscriptionPayload
}

type User implements Node {
  id: ID!
  accountType: String!
  employeeId: String!
  name: String!
  password: String!
  sex: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  schedules(where: ScheduleWhereInput, orderBy: ScheduleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Schedule!]
  availability_next: String
  availability_default: String
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  accountType: String!
  employeeId: String!
  name: String!
  password: String!
  sex: String!
  availability_next: String
  availability_default: String
  schedules: ScheduleCreateManyWithoutUserInput
}

input UserCreateOneWithoutSchedulesInput {
  create: UserCreateWithoutSchedulesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutSchedulesInput {
  id: ID
  accountType: String!
  employeeId: String!
  name: String!
  password: String!
  sex: String!
  availability_next: String
  availability_default: String
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  accountType_ASC
  accountType_DESC
  employeeId_ASC
  employeeId_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  sex_ASC
  sex_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  availability_next_ASC
  availability_next_DESC
  availability_default_ASC
  availability_default_DESC
}

type UserPreviousValues {
  id: ID!
  accountType: String!
  employeeId: String!
  name: String!
  password: String!
  sex: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  availability_next: String
  availability_default: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  accountType: String
  employeeId: String
  name: String
  password: String
  sex: String
  availability_next: String
  availability_default: String
  schedules: ScheduleUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  accountType: String
  employeeId: String
  name: String
  password: String
  sex: String
  availability_next: String
  availability_default: String
}

input UserUpdateOneRequiredWithoutSchedulesInput {
  create: UserCreateWithoutSchedulesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutSchedulesDataInput
  upsert: UserUpsertWithoutSchedulesInput
}

input UserUpdateWithoutSchedulesDataInput {
  accountType: String
  employeeId: String
  name: String
  password: String
  sex: String
  availability_next: String
  availability_default: String
}

input UserUpsertWithoutSchedulesInput {
  update: UserUpdateWithoutSchedulesDataInput!
  create: UserCreateWithoutSchedulesInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  accountType: String

  """All values that are not equal to given value."""
  accountType_not: String

  """All values that are contained in given list."""
  accountType_in: [String!]

  """All values that are not contained in given list."""
  accountType_not_in: [String!]

  """All values less than the given value."""
  accountType_lt: String

  """All values less than or equal the given value."""
  accountType_lte: String

  """All values greater than the given value."""
  accountType_gt: String

  """All values greater than or equal the given value."""
  accountType_gte: String

  """All values containing the given string."""
  accountType_contains: String

  """All values not containing the given string."""
  accountType_not_contains: String

  """All values starting with the given string."""
  accountType_starts_with: String

  """All values not starting with the given string."""
  accountType_not_starts_with: String

  """All values ending with the given string."""
  accountType_ends_with: String

  """All values not ending with the given string."""
  accountType_not_ends_with: String
  employeeId: String

  """All values that are not equal to given value."""
  employeeId_not: String

  """All values that are contained in given list."""
  employeeId_in: [String!]

  """All values that are not contained in given list."""
  employeeId_not_in: [String!]

  """All values less than the given value."""
  employeeId_lt: String

  """All values less than or equal the given value."""
  employeeId_lte: String

  """All values greater than the given value."""
  employeeId_gt: String

  """All values greater than or equal the given value."""
  employeeId_gte: String

  """All values containing the given string."""
  employeeId_contains: String

  """All values not containing the given string."""
  employeeId_not_contains: String

  """All values starting with the given string."""
  employeeId_starts_with: String

  """All values not starting with the given string."""
  employeeId_not_starts_with: String

  """All values ending with the given string."""
  employeeId_ends_with: String

  """All values not ending with the given string."""
  employeeId_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  sex: String

  """All values that are not equal to given value."""
  sex_not: String

  """All values that are contained in given list."""
  sex_in: [String!]

  """All values that are not contained in given list."""
  sex_not_in: [String!]

  """All values less than the given value."""
  sex_lt: String

  """All values less than or equal the given value."""
  sex_lte: String

  """All values greater than the given value."""
  sex_gt: String

  """All values greater than or equal the given value."""
  sex_gte: String

  """All values containing the given string."""
  sex_contains: String

  """All values not containing the given string."""
  sex_not_contains: String

  """All values starting with the given string."""
  sex_starts_with: String

  """All values not starting with the given string."""
  sex_not_starts_with: String

  """All values ending with the given string."""
  sex_ends_with: String

  """All values not ending with the given string."""
  sex_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  availability_next: String

  """All values that are not equal to given value."""
  availability_next_not: String

  """All values that are contained in given list."""
  availability_next_in: [String!]

  """All values that are not contained in given list."""
  availability_next_not_in: [String!]

  """All values less than the given value."""
  availability_next_lt: String

  """All values less than or equal the given value."""
  availability_next_lte: String

  """All values greater than the given value."""
  availability_next_gt: String

  """All values greater than or equal the given value."""
  availability_next_gte: String

  """All values containing the given string."""
  availability_next_contains: String

  """All values not containing the given string."""
  availability_next_not_contains: String

  """All values starting with the given string."""
  availability_next_starts_with: String

  """All values not starting with the given string."""
  availability_next_not_starts_with: String

  """All values ending with the given string."""
  availability_next_ends_with: String

  """All values not ending with the given string."""
  availability_next_not_ends_with: String
  availability_default: String

  """All values that are not equal to given value."""
  availability_default_not: String

  """All values that are contained in given list."""
  availability_default_in: [String!]

  """All values that are not contained in given list."""
  availability_default_not_in: [String!]

  """All values less than the given value."""
  availability_default_lt: String

  """All values less than or equal the given value."""
  availability_default_lte: String

  """All values greater than the given value."""
  availability_default_gt: String

  """All values greater than or equal the given value."""
  availability_default_gte: String

  """All values containing the given string."""
  availability_default_contains: String

  """All values not containing the given string."""
  availability_default_not_contains: String

  """All values starting with the given string."""
  availability_default_starts_with: String

  """All values not starting with the given string."""
  availability_default_not_starts_with: String

  """All values ending with the given string."""
  availability_default_ends_with: String

  """All values not ending with the given string."""
  availability_default_not_ends_with: String
  schedules_every: ScheduleWhereInput
  schedules_some: ScheduleWhereInput
  schedules_none: ScheduleWhereInput
}

input UserWhereUniqueInput {
  id: ID
  employeeId: String
}
