# import UserOrderByInput FreetimeOrderByInput Schedule_DayOrderByInput from './generated/prisma.graphql'

type Query {
  users(query: String, orderBy: UserOrderByInput): [User]
  me: User
  freetimes(schedule_No: String!, availability: String!, day_No: String!, orderBy: FreetimeOrderByInput): [Freetime]
  myFreetimes(schedule_No: String!): [Freetime]
  schedule_interval(start: String!, end: String!): Schedule_Interval
  schedule(schedule_No: String!): Schedule
  schedule_days(schedule_No: String!): [Schedule_Day]
  schedule_staff(id: ID!): Schedule_Staff
  schedule_staffs(day_No: String!): [Schedule_Staff]
}

type Mutation {
  createUser(auth: String!, data: CreateUserInput!): AuthPayload!
  updateUser(employeeId: String!, data: UpdateUserInput!): User
  deleteUser(employeeId: String!): User
  login(data: LoginInput!): AuthPayload!
  createFreetime(data: createFreetimeInput): Freetime
  updateFreetime(day_No: String!, data: updateFreetimeInput): Freetime
  deleteManyFreetimes(schedule_No: String!): Long
  createSchedule(schedule_No: String!): Schedule
  deleteSchedule(schedule_No: String!): Schedule
  createSchedule_Day(schedule_No: String!, day_No:String!): Schedule_Day
  createSchedule_Interval(start: String!, end: String!): Schedule_Interval
  createSchedule_Staff(data: createSchedule_StaffInput!): Schedule_Staff
  updateSchedule_Staff(data: updateSchedule_StaffInput!): Schedule_Staff
  deleteSchedule_Staff(id: ID!): Schedule_Staff
}

type AuthPayload {
  token: String!
  user: User!
}

input CreateUserInput {
  accountType: String!
  employeeId: String!
  sex: String!
  name: String!
  password: String!
}

input UpdateUserInput {
  accountType: String
  employeeId: String
  sex: String
  name: String
  password: String
  useDefaultFreetime: Boolean
}

input createFreetimeInput {
  day_No: String! 
  schedule_No: String!
}

input updateFreetimeInput {
  availability: String
  useDefault: Boolean
}

input createSchedule_StaffInput {
  day_No: String!
  schedule_No: String!
  employeeId: String
  position: String!
  interval_No: String!
}

input updateSchedule_StaffInput {
  id: ID!
  employeeId: String
  interval_No: String
}

type User {
  id: ID!
  accountType: String!
  employeeId: String!
  name: String!
  sex: String!
  password: String!
  useDefaultFreetime: Boolean
  hiredate: DateTime
  permanentStaff: Boolean
  createdAt: String!
  updatedAt: String!
}

input LoginInput {
  employeeId: String!
  password: String!
}

type Schedule {
  id: ID!
  schedule_No: String!
  schedule_days: [Schedule_Day!]!
  schedule_staffs: [Schedule_Staff!]!
  freetimes: [Freetime!]! 
}

type Freetime {
  id: ID!
  day_No: String!
  availability: String!
  user: User!
  schedule: Schedule!
  updatedAt: String!
  createdAt: String!
}

type Schedule_Day {
  id: ID!
  day_No: String!
  schedule_staffs: [Schedule_Staff!]!
  schedule: Schedule!
}

type Schedule_Staff {
  id: ID!
  schedule_day: Schedule_Day!
  schedule: Schedule!
  staff: User
  position: String!
  schedule_interval: Schedule_Interval!
}

type Schedule_Interval {
  id: ID!
  interval_No: String!
  start: String!
  end: String!
}
